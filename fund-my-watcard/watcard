#!/usr/bin/env python

import argparse
import json
import os
import time

from splinter import Browser


def generate_config_file():
    _config_info = {
        "userName": "User name of WatIM",
        "password": "Password of WatIM",
        "ordName": "Name on the credit card",
        "phoneNumber": "Phone number",
        "address1": "Home address 1",
        "address2": "Home address 2 (Remove all the characters if no address2)",
        "ordPostalCode": "Postal code",
        "ordCity": "City",
        "ordEmailAddress": "Email address",
        "paymentMethod": "The payment method ('CC' for 'Credit Card')",
        "trnCardOwner": "Card owner",
        "trnCardType": "Card type ('VI' for 'Visa', 'MC' for 'Master Card')",
        "trnCardNumber": "Card number",
        "trnExpMonth": "Expire month",
        "trnExpYear": "Expire year",
        "trnCardCvd": "Card CVD (3 digits in the back of the card)"
    }
    with open("watcard.json", "w+") as json_file:
        json.dump(_config_info, json_file, indent=2)
    assert os.path.isfile("watcard.json") is True
    print("Generate config file successfully. Please fill your information in watcard.json")


class MyWatCard:
    def __init__(self, **kwargs):
        self.userName = kwargs["userName"]
        self.password = kwargs["password"]
        self.ordName = kwargs["ordName"]
        self.phoneNumber = kwargs["phoneNumber"]
        self.ordAddress1 = kwargs["address1"]
        self.ordAddress2 = None if len(kwargs["address2"]) == 0 else kwargs["address2"]
        self.ordCity = kwargs["ordCity"]
        self.ordPostalCode = kwargs["ordPostalCode"]
        self.ordEmailAddress = kwargs["ordEmailAddress"]
        self.paymentMethod = kwargs["paymentMethod"]
        self.trnCardOwner = kwargs["trnCardOwner"]
        self.trnCardType = kwargs["trnCardType"]
        self.trnCardNumber = kwargs["trnCardNumber"]
        self.trnExpMonth = kwargs["trnExpMonth"]
        self.trnExpYear = kwargs["trnExpYear"]
        self.trnCardCvd = kwargs["trnCardCvd"]
        self.trnAmount = 0

    def add_fund(self, amount):
        try:
            with Browser("chrome", **{"executable_path": os.environ["CHROMEDRIVER"]}, incognito=True,
                         headless=True) as browser:
                browser.visit("https://watcard.uwaterloo.ca/OneWebUW/addfunds_watiam.asp")
                browser.fill("UserName", self.userName)
                browser.fill("Password", self.password)
                button = browser.find_by_name("submit")
                button.click()
                time.sleep(2)

                browser.fill("ordName", self.ordName)
                browser.fill("ordPhoneNumber", self.phoneNumber)
                browser.fill("ordAddress1", self.ordAddress1)
                if self.ordAddress2 is not None:
                    browser.fill("ordAddress2", self.ordAddress2)
                browser.fill("ordCity", self.ordCity)
                browser.fill("ordPostalCode", self.ordPostalCode)
                browser.fill("ordEmailAddress", self.ordEmailAddress)
                browser.fill("trnAmount", str(amount))
                browser.find_by_name("paymentMethod").first.select(self.paymentMethod)
                browser.fill("trnCardOwner", self.trnCardOwner)
                browser.find_by_name("trnCardType").first.select(self.trnCardType)
                browser.fill("trnCardNumber", self.trnCardNumber)
                browser.find_by_name("trnExpMonth").first.select(self.trnExpMonth)
                browser.find_by_name("trnExpYear").first.select(self.trnExpYear)
                browser.fill("trnCardCvd", self.trnCardCvd)
                button = browser.find_by_name("submitButton")
                button.click()
                if browser.find_by_text("Funds were added to your card.").first is not None:
                    return True
        except Exception as e:
            print(str(e))
            return False

    def check_balance(self):
        pass


class NoConfigFileException(Exception):
    """Raised when watcard.json is not found."""

    def __init__(self, message="Cannot find watcard.json, run 'watcard --config' at first."):
        super(NoConfigFileException, self).__init__(message)
        self.message = message


parser = argparse.ArgumentParser(description="Fund my WatCard: A tool to fund WatCard easily.")
group = parser.add_mutually_exclusive_group()
group.add_argument("-c", "--config", help="generate the config file", action="store_true")
group.add_argument("-f", "--fund", type=float, help="the fund amount to the WatCard", action="store")
args = parser.parse_args()

if args.config:
    generate_config_file()

if args.fund:
    amount = round(args.fund, 2)
    if os.path.isfile("watcard.json"):
        with open("watcard.json") as f:
            _config = json.load(f)
        _my_wat_card = MyWatCard(**_config)
        res = _my_wat_card.add_fund(amount)
        if res:
            print("Adding ${} to account {} successfully.".format(amount, _config["userName"]))
        else:
            print("Adding ${} to account {} failed.".format(amount, _config["userName"]))
    else:
        raise NoConfigFileException()

if not args.config and not args.fund:
    args = parser.parse_args(["-h"])
